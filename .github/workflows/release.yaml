name: Release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+*"

jobs:
  get-version:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ env.VERSION }}
    steps:
      - name: Get the version
        shell: bash
        if: env.VERSION == ''
        run: |
          echo "VERION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is ${{ env.VERSION }}"
  build:
    name: build
    needs: ["get-version"]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
            target_rustflags: ""
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
            target_rustflags: "--codegen linker=aarch64-linux-gnu-gcc"
          - target: x86_64-apple-darwin
            os: macos-12
            target_rustflags: ""
          - target: aarch64-apple-darwin
            os: macos-12
            target_rustflags: ""
          - target: x86_64-pc-windows-msvc
            os: windows-2022
            target_rustflags: ""
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install packages (on Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt install -y brotli zstd tar

      - name: Install packages (on aarch64 ubuntu)
        if: matrix.target == "aarch64-unknown-linux-musl"
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - name: Bulid
        env:
          RUSTFLAGS: ${{ matrix.target_rustflags }}
        run: |
          cargo build --verbose --target ${{ matrix.target }} --release

      - name: Archiving
        shell: bash
        run: |
          stage="popolion-${{ needs.get-version.outputs.version }}-${{ matrix.target }}"
          mkdir -p "$stage"

          cp README.md "$stage"
          if [ "${{ matrix.os }}" = "windows-2022" ]; then
            cp "target/${{ matrix.target }}/release/popo.exe" "$stage/"
            7z a "$stage.zip" "$stage"
            echo "ASSET=$stage.zip" >> $GITHUB_ENV
          else
            cp "target/${{ matrix.target }}/release/popo" "$stage/"
            tar zcvf "$stage.tar.gz" "$stage"
            echo "ASSET=$stage.tar.gz" >> $GITHUB_ENV
          fi

      - name: Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ${{ env.ASSET }}
          draft: true
